import relative parent::utils { gcd, split_lines_preserving_empty_lines, trim, trim_whitespace }

comptime part1_expected_value() => 19199u64
comptime part2_expected_value() => 13663968099527u64

fn part1(lines: [String]) throws -> u64 {
    let nodes = build_node_map(lines: lines[1..].to_array())
    return find(
        instructions: Instructions(seed: lines[0])
        nodes
        starting_node: "AAA"
        found: &fn(node: String) throws => node == "ZZZ"
    ).1
}
fn part2(lines: [String]) throws -> u64 {
    mut current_nodes: [String] = []
    let nodes = build_node_map(
        lines: lines[1..].to_array()
        &fn[&current_nodes](key: String) throws -> void {
            if key.ends_with("A") {
                current_nodes.push(key)
            }
        }
    )
    let instructions = Instructions(seed: lines[0])
    mut steps: [u64] = []
    for starting_node in current_nodes {
        let (_, steps_to_first_z) = find(
            instructions
            nodes
            starting_node
            found: &fn(node: String) throws => node.ends_with("Z")
        )
        steps.push(steps_to_first_z)
    }

    mut lcm = steps.pop()!
    for count in steps {
        lcm = lcm * count / gcd(lcm, count)
    }
    return lcm
}

fn build_node_map(
    lines: [String]
    anon cb: &fn(key: String) throws -> void = &fn(key: String) throws {}
) throws -> [String:(String, String)] {
    mut nodes: [String:(String, String)] = [:]
    for line in lines {
        if line.is_empty() {
            continue
        }
        let parts = line.split(c'=')
        let key = trim_whitespace(parts[0])
        cb(key)
        let values = trim(trim_whitespace(parts[1]), first: 1, last: 1).split(c',')
        let l = trim_whitespace(values[0])
        let r = trim_whitespace(values[1])

        nodes.set(key, (l, r))
    }
    return nodes
}

fn find(
    instructions: Instructions
    nodes: [String:(String, String)]
    starting_node: String
    found: &fn(node: String) throws -> bool
) throws -> (String, u64) {
    mut current_node = starting_node
    mut steps = 0u64
    for b in instructions {
        current_node = match b {
            b'L' => nodes[current_node].0 // indexed access with an optional causes it to blow up but no error from compiler
            b'R' => nodes[current_node].1
            else => { abort() }
        }
        steps++

        if found(node: current_node) {
            break
        }
    }
    return (current_node, steps)
}

struct Instructions implements(Iterable<u8>) {
    seed: String
    i: usize = 0
    fn next(mut this) -> u8? {
        let byte = .seed.byte_at(.i)
        .i = (.i + 1) % .seed.length()
        return byte
    }
}