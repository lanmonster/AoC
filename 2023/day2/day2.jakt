import utils { is_digit }

// TODO implement checked unary operator negate in comptime
comptime part1_expected_value() => 2551u64
comptime part2_expected_value() => 62811u64

fn part1(lines: [String]) throws -> u64 {
    mut sum = 0u64
    for line in lines {
        let game = Game::from_line(line)
        if game.is_possible(reds: 12, greens: 13, blues: 14) {
            sum += game.id
        }
    }
    return sum
}
fn part2(lines: [String]) throws -> u64 {
    mut sum = 0u64
    for line in lines {
        sum += Game::from_line(line).power()
    }
    return sum
}

struct Game {
    id: u64
    subsets: [Subset]

    fn from_line(line: String) throws -> Game {
        guard line.starts_with("Game ") else {
            eprintln("Line should start with \"Game \"")
            abort()
        }
        mut i = 5uz
        mut id_digits: [u8] = []
        while line.byte_at(i) != b':' {
            id_digits.push(line.byte_at(i++) - b'0')
        }
        i++
        while line.byte_at(i) == b' ' {
            i++
        }
        mut reds = 0u64
        mut greens = 0u64
        mut blues = 0u64
        mut subsets: [Subset] = []
        mut digits: [u8] = []
        while i < line.length() {
            let byte = line.byte_at(i)
            if byte == b';' {
                subsets.push(Subset(reds, greens, blues))
                digits.resize(0)
                reds = 0
                greens = 0
                blues = 0
            } else if byte == b',' {
                digits.resize(0)
            } else if is_digit(byte) {
                digits.push(byte - b'0')
            } else if byte == b'r' {
                reds = digits_to_number(digits)
                i += 2
            } else if byte == b'g' {
                greens = digits_to_number(digits)
                i += 4
            } else if byte == b'b' {
                blues = digits_to_number(digits)
                i += 3
            }
            i++
        }
        subsets.push(Subset(reds, greens, blues))

        return Game(
            id: digits_to_number(id_digits)
            subsets
        )
    }

    fn is_possible(this, reds: u64, greens: u64, blues: u64) -> bool {
        mut possible = true
        for subset in .subsets {
            if subset.reds > reds or subset.greens > greens or subset.blues > blues {
                possible = false
                break
            }
        }
        return possible
    }

    private fn min_dice(this) -> (u64, u64, u64) {
        mut highest_red = 0u64
        mut highest_green = 0u64
        mut highest_blue = 0u64
        for subset in .subsets {
            if subset.reds > highest_red {
                highest_red = subset.reds
            }
            if subset.greens > highest_green {
                highest_green = subset.greens
            }
            if subset.blues > highest_blue {
                highest_blue = subset.blues
            }
        }
        return (highest_red, highest_green, highest_blue)
    }

    fn power(this) -> u64 {
        let (min_reds, min_greens, min_blues) = .min_dice()
        return min_reds * min_greens * min_blues
    }
}

struct Subset {
    reds: u64
    greens: u64
    blues: u64
}

fn digits_to_number(anon digits: [u8]) -> u64 {
    if digits.is_empty() {
        return 0
    }
    mut result = 0u64
    mut magnitude = 1u64
    for i in digits.size()..0 {
        let digit = digits[i - 1]
        result += ((digit as! u64) * magnitude) as! u64
        magnitude *= 10
    }
    return result
}
