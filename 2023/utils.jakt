fn is_digit(anon c: c_char) -> bool {
    return match c {
        c'0' | c'1' | c'2' | c'3' | c'4' | c'5' | c'6' | c'7' | c'8' | c'9' => true
        else => false
    }
}
fn is_digit(anon c: u8) -> bool {
    return match c {
        b'0' | b'1' | b'2' | b'3' | b'4' | b'5' | b'6' | b'7' | b'8' | b'9' => true
        else => false
    }
}

fn split(anon bytes: [u8], split_char: c_char) throws -> [String] {
    mut sb = StringBuilder::create()
    for b in bytes { sb.append(b) }
    return sb.to_string().split(split_char)
}

fn get(anon strs: [String], anon at: (usize, usize)) -> u8 => strs[at.0].byte_at(at.1)

fn digits_to_number(anon digits: [u8]) -> u64 {
    if digits.is_empty() {
        return 0
    }
    mut result = 0u64
    mut magnitude = 1u64
    for i in digits.size()..0 {
        let digit = digits[i - 1]
        result += ((digit as! u64) * magnitude) as! u64
        magnitude *= 10
    }
    return result
}