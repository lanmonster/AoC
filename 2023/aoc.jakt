import day1::day1 as d1
import day2::day2 as d2
import day3::day3 as d3
import day4::day4 as d4
import day5::day5 as d5
import day6::day6 as d6
import day7::day7 as d7
import day8::day8 as d8
import day9::day9 as d9
import day10::day10 as d10
import utils { split }

fn main(args: [String]) {
    guard args.size() == 3 else {
        eprintln("Must specify a day (1-25) and an valid filename without extension. ex: build/aoc 17 test2")
        abort()
    }
    println("Day {}", args[1])

    mut input_file = try File::open_for_reading(format("./day{}/{}.txt", args[1], args[2])) catch {
        eprintln("could not find ./day{}/{}.txt", args[1], args[2])
        return 1
    }
    mut lines = split(input_file.read_all(), split_char: c'\n')

    let (p1expected, p1result, p2expected, p2result) = match args[1] {
        "1" => (d1::part1_expected_value(), d1::part1(lines), d1::part2_expected_value(), d1::part2(lines))
        "2" => (d2::part1_expected_value(), d2::part1(lines), d2::part2_expected_value(), d2::part2(lines))
        "3" => (d3::part1_expected_value(), d3::part1(lines), d3::part2_expected_value(), d3::part2(lines))
        "4" => (d4::part1_expected_value(), d4::part1(lines), d4::part2_expected_value(), d4::part2(lines))
        "5" => (d5::part1_expected_value(), d5::part1(lines), d5::part2_expected_value(), d5::part2(lines))
        "6" => (d6::part1_expected_value(), d6::part1(lines), d6::part2_expected_value(), d6::part2(lines))
        "7" => (d7::part1_expected_value(), d7::part1(lines), d7::part2_expected_value(), d7::part2(lines))
        "8" => (d8::part1_expected_value(), d8::part1(lines), d8::part2_expected_value(), d8::part2(lines))
        "9" => (d9::part1_expected_value(), d9::part1(lines), d9::part2_expected_value(), d9::part2(lines))
        "10" => (d10::part1_expected_value(), d10::part1(lines), d10::part2_expected_value(), d10::part2(lines))
        else => {eprintln("unrecognized arg: {}", args[1]); abort()}
    }

    if (p1result != p1expected) {
        eprintln("wrong part1. expected: {}, got {}", p1expected, p1result)
        return 1
    }
    if (p2result != p2expected) {
        eprintln("wrong part2. expected: {}, got {}", p2expected, p2result)
        return 1
    }
    println("part1 = {}, part2 = {}", p1result, p2result)
}
